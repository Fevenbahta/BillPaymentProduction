<?xml version="1.0" encoding="UTF-8"?>
<sequence xmlns="http://ws.apache.org/ns/synapse" name="validateecpayment">
    <log level="custom">
        <property name="message" value="Starting validation of EC payment payload"/>
    </log>
    <property name="payload" expression="json-eval($)" scope="default" type="STRING"/>
    <script language="js">
        <![CDATA[
        var payload = mc.getProperty("payload");
        payload = JSON.parse(payload);
        var fields = ["billerType", "customerCode", "invoiceId", "referenceNo", "customerId", "reason", "paymentAmount", "branch", "accountNo", "providerId"];
        var missingFields = [];
        for (var i = 0; i < fields.length; i++) {
            if (payload[fields[i]] === undefined || payload[fields[i]] === null) {
                missingFields.push(fields[i]);
            }
        }
        if (missingFields.length > 0) {
            mc.setProperty("ERROR_MESSAGE", "Missing mandatory fields: " + missingFields.join(", "));
            mc.setProperty("ERROR_CODE", "400");
        }
        ]]>
    </script>
    <filter xpath="get-property('ERROR_CODE')">
        <then>
            <payloadFactory media-type="json">
                <format>{
  "returnCode": "ERROR",
  "ticketId": "247f4b-5d7b-4d32-a1db-f893edaa38a7",
  "traceId": "92e9013d25cca084",
  "feedbacks": [
    {
      "code": "SB_DS_001",
      "label": "Validation Error",
      "severity": "ERROR",
      "type": "BUS",
      "source": "validateecpayment",
      "origin": "WSO2-MI",
      "spanId": "92e9013d",
      "parameters": [
        {
          "code": "0",
          "value": "$1"
        }
      ]
    }
  ]
}</format>
                <args>
                    <arg evaluator="xml" expression="get-property('ERROR_MESSAGE')"/>
                </args>
            </payloadFactory>
            <respond/>
        </then>
        <else>
            <log level="custom">
                <property name="message" value="Validation passed, proceeding to create EC payment"/>
            </log>
  <property name="providerId" expression="json-eval($.providerId)" scope="default"/>
    <property name="invoiceId" expression="json-eval($.invoiceId)" scope="default"/>
    <property name="customerId" expression="json-eval($.customerId)" scope="default"/>
    <property name="branch" expression="json-eval($.branch)" scope="default"/>
    <property name="accountNo" expression="json-eval($.accountNo)" scope="default"/>
    <property name="reason" expression="json-eval($.reason)" scope="default"/>
    <property name="paymentAmount" expression="json-eval($.paymentAmount)" scope="default"/>
    <property name="paymentDate" expression="json-eval($.paymentDate)" scope="default"/>
  <property name="referenceNo" expression="json-eval($.referenceNo)" scope="default"/>
    <!-- Step 2: Build SOAP Payload -->
    <payloadFactory media-type="xml">
        <format>
            <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                              xmlns:amp="http://soprabanking.com/amplitude">
                <soapenv:Header/>
                <soapenv:Body>
                    <amp:createECPaymentV2RequestFlow>
                        <amp:requestHeader>
                            <amp:requestId>req10</amp:requestId>
                            <amp:serviceName>createECPaymentV2</amp:serviceName>
                            <amp:timestamp>2025-04-16T13:52:01</amp:timestamp>
                            <amp:originalName>TELEBIRR</amp:originalName>
                            <amp:languageCode>002</amp:languageCode>
                            <amp:userCode>TELEBIRR</amp:userCode>
                        </amp:requestHeader>
                        <amp:createECPaymentV2Request>
                            <amp:providerId>$1</amp:providerId>
                            <amp:invoiceId>$2</amp:invoiceId>
                            <amp:customerCode>$3</amp:customerCode>
                            <amp:debitedAccount>
                                <amp:branch>$4</amp:branch>
                                <amp:currency>001</amp:currency>
                                <amp:account>$5</amp:account>
                            </amp:debitedAccount>
                            <amp:reason>$6</amp:reason>
                            <amp:paymentAmount>$7</amp:paymentAmount>
                            <amp:paymentDate>2025-04-16</amp:paymentDate>
                            <amp:inputBranchCode>$4</amp:inputBranchCode>
                            <amp:paymentChannelIdentification>
                                <amp:paymentUseChannel>5</amp:paymentUseChannel>
                            </amp:paymentChannelIdentification>
                            <amp:deferredPayment>0</amp:deferredPayment>
                            <amp:pendingPayment>0</amp:pendingPayment>
                        </amp:createECPaymentV2Request>
                    </amp:createECPaymentV2RequestFlow>
                </soapenv:Body>
            </soapenv:Envelope>
        </format>
        <args>
            <arg expression="get-property('providerId')"/>
            <arg expression="get-property('invoiceId')"/>
            <arg expression="get-property('customerId')"/>
            <arg expression="get-property('branch')"/>
            <arg expression="get-property('accountNo')"/>
            <arg expression="get-property('reason')"/>
            <arg expression="get-property('paymentAmount')"/>
         
        </args>
    </payloadFactory>
        
    <log level="full">
        <property name="Generated SOAP Payload" expression="get-property('Payload')" />
    </log>
            <property name="Content-Type" value="text/xml" scope="transport"/>  
              <property name="SOAPAction" value="createECPaymentV2" scope="transport" />
            <call>
                <endpoint>
                    <address format="soap11" uri="https://10.1.7.85:8095/createECPaymentV2"/>
                </endpoint>
            </call>

<log level="full"/>
            <!-- Extract relevant info from SOAP response (adjust XPath as needed) -->
<property name="ecPaymentStatus" expression="//createECPaymentV2ResponseFlow/paymentStatus/text()" scope="default"/>

<!-- Handle success or failure -->
<filter xpath="$ctx:ecPaymentStatus = '0'">
    <then>
        <payloadFactory media-type="json">
            <format>
                {
                  "id": "$1",
                  "status": "ACCEPTED"
                }
            </format>
            <args>
                <arg value="{uuid()}"/>
            </args>
        </payloadFactory>

           <dbreport>
                        <connection>
                            <pool>
                                <dsName>jdbc/PostgresDB</dsName>
                            </pool>
                        </connection>
                        <statement>
                            <sql>
                                INSERT INTO public."ECPaymentRecords" (
                                    "BillerType", "CustomerCode", "InvoiceId", "ReferenceNo", "CustomerId", 
                                    "Reason", "PaymentAmount", "PaymentDate", "Branch", "Currency", 
                                    "AccountNo", "ProviderId", "Status"
                                ) 
                                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                            </sql>
                            <parameter expression="get-property('billerType')" type="VARCHAR"/>
                            <parameter expression="get-property('customerCode')" type="VARCHAR"/>
                            <parameter expression="get-property('invoiceId')" type="VARCHAR"/>
                            <parameter expression="get-property('referenceNo')" type="VARCHAR"/>
                            <parameter expression="get-property('customerId')" type="VARCHAR"/>
                            <parameter expression="get-property('reason')" type="VARCHAR"/>
                            <parameter expression="get-property('paymentAmount')" type="DECIMAL"/>
                            <parameter expression="get-property('paymentDate')" type="DATE"/>
                            <parameter expression="get-property('branch')" type="VARCHAR"/>
                            <parameter expression="get-property('currency')" type="VARCHAR"/>
                            <parameter expression="get-property('accountNo')" type="VARCHAR"/>
                            <parameter expression="get-property('providerId')" type="VARCHAR"/>
                            <parameter value="success" type="VARCHAR"/>
                        </statement>
                    </dbreport>
        <respond/>
    </then>
    <else>

              <dbreport>
                        <connection>
                            <pool>
                                <dsName>jdbc/PostgresDB</dsName>
                            </pool>
                        </connection>
                        <statement>
                            <sql>
                                INSERT INTO public."ECPaymentRecords" (
                                    "BillerType", "CustomerCode", "InvoiceId", "ReferenceNo", "CustomerId", 
                                    "Reason", "PaymentAmount", "PaymentDate", "Branch", "Currency", 
                                    "AccountNo", "ProviderId", "Status"
                                ) 
                                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                            </sql>
                            <parameter expression="get-property('billerType')" type="VARCHAR"/>
                            <parameter expression="get-property('customerCode')" type="VARCHAR"/>
                            <parameter expression="get-property('invoiceId')" type="VARCHAR"/>
                            <parameter expression="get-property('referenceNo')" type="VARCHAR"/>
                            <parameter expression="get-property('customerId')" type="VARCHAR"/>
                            <parameter expression="get-property('reason')" type="VARCHAR"/>
                            <parameter expression="get-property('paymentAmount')" type="DECIMAL"/>
                            <parameter expression="get-property('paymentDate')" type="DATE"/>
                            <parameter expression="get-property('branch')" type="VARCHAR"/>
                            <parameter expression="get-property('currency')" type="VARCHAR"/>
                            <parameter expression="get-property('accountNo')" type="VARCHAR"/>
                            <parameter expression="get-property('providerId')" type="VARCHAR"/>
                                        <parameter value="fail" type="VARCHAR"/>
                        </statement>
                    </dbreport>
        <property name="HTTP_SC" value="500" scope="axis2" type="INTEGER"/>
        <property name="ecPaymentErrorDescription"
          expression="//fjs1:createECPaymentV2ResponseFlow/fjs1:responseStatus/fjs1:messages/fjs1:message/fjs1:line/text()"
          xmlns:fjs1="http://soprabanking.com/amplitude"
          scope="default"/>
          
             <script language="js">
        <![CDATA[
            var uuid = (function() {
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                    var r = Math.random() * 16 | 0,
                        v = c === 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
            })();
            mc.setProperty("ticketId", uuid);  // Save generated UUID to the property
        ]]>
    </script>
          
      <log level="custom">
    <property name="ticketId" expression="$ctx:ticketId"/> <!-- Logs the ticketId before using it in the payload -->
</log>

          <payloadFactory media-type="json">
    <format>
        {
          "returnCode": "ERROR",
          "ticketId": "$1",
          "traceId": "$2",
          "feedbacks": [
            {
              "code": "SB_DS_002",
              "label": "EC Payment Failed",
              "severity": "ERROR",
              "type": "BUS",
              "source": "validateecpayment",
              "origin": "WSO2-MI",
              "spanId": "$3",
              "parameters": [
                {
                  "code": "1",
                  "value": "$4"
                },
                {
                  "code": "2",
                  "value": "$5"
                }
              ]
            }
          ]
        }
    </format>
    
    <args>
          <arg expression="$ctx:ticketId"/> 
        <arg expression="fn:substring-before(get-property('providerId'), '@')"/>
        <arg value="{substring(uuid(), 1, 8)}"/>
        <arg expression="$ctx:ecPaymentStatus"/>
        <arg expression="get-property('ecPaymentErrorDescription')"/>
        
    </args>
</payloadFactory>
           
           <property name="returnCode" value="ERROR"/>
<script language="js">
    var currentDate = new Date();
    var formattedDate = currentDate.toISOString().split('T')[0] + " " + currentDate.toTimeString().split(' ')[0]; // Formats as yyyy-MM-dd HH:mm:ss
    mc.setProperty('currentDate', formattedDate);
</script>


<dbreport>
            <connection>
                <pool>
                    <dsName>jdbc/PostgresDB</dsName>
                </pool>
            </connection>
            <statement>
                <sql>
                    INSERT INTO public.BillError (
                      "Id","ReturnCode", "TicketId", "TraceId", "Feedbacks", "RequestDate", "ErrorType"
                    )
                    VALUES (?,?, ?, ?, ?, ?, ?)
                </sql>
                 <parameter expression="get-property('ticketId')" type="VARCHAR"/>  <!-- TicketId -->
                <parameter expression="get-property('returnCode')" type="VARCHAR"/>  <!-- ReturnCode -->
                <parameter expression="get-property('ticketId')" type="VARCHAR"/>  <!-- TicketId -->
                <parameter expression="get-property('traceId')" type="VARCHAR"/>  <!-- TraceId -->
                <parameter expression="get-property('ecPaymentErrorDescription')" type="VARCHAR"/>  <!-- Feedbacks -->
                <parameter expression="get-property('currentDate')" type="TIMESTAMP"/>  <!-- RequestDate -->
                <parameter expression="'API Error'" type="VARCHAR"/>  <!-- ErrorType -->
            </statement>
        </dbreport>
        <respond/>

        
    </else>
</filter>

            <respond/>
        </else>
    </filter>
</sequence>
