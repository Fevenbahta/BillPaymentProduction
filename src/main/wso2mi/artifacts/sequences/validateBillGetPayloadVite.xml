<?xml version="1.0" encoding="UTF-8"?>
<sequence name="validateBillGetPayloadVite" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
  <log level="full"/>
    <script language="js">
        var payload = mc.getPayloadJSON();
        var providerId = payload.providerId;
        var uniqueCode = payload.uniqueCode;
        var phoneNumber = payload.phoneNumber;
        var billerType = payload.billerType;
        var referenceNo = payload.referenceNo;
    
        

    // Set values as properties for use in the sequence
    mc.setProperty("providerId", providerId);
    mc.setProperty("identifierValue", uniqueCode);
    mc.setProperty("phoneNumber", phoneNumber);

        // Validation logic: Ensure required fields are present and valid
        var missingFields = [];
        
        // Check if either providerId and uniqueCode are present, or phoneNumber is present
        if (!phoneNumber &amp;&amp;  ( !uniqueCode)) {
            missingFields.push("Either uniqueCode or phoneNumber must be provided.");
        }

        // Check for other required fields
        if (!billerType) {
            missingFields.push("billerType");
        }
        if (!referenceNo) {
            missingFields.push("referenceNo");
        }
       

        // If any fields are missing, set error response
        if (missingFields.length > 0) {
            mc.setProperty("errorCode", "400");
            var errorMessage = "The following fields are missing or invalid: " + missingFields.join(", ");
            mc.setProperty("errorMessage", errorMessage);

            // Create a dynamic error message based on missing fields
            var errorResponse = {
                "returnCode": "ERROR",
                "ticketId": "247f4b-5d7b-4d32-a1db-f893edaa38a7", // You can generate or assign dynamically if needed
                "traceId": "92e9013d25cca084", // You can generate or assign dynamically if needed
                "feedbacks": [
                    {
                        "code": "SB_DS_001",  // Error code (define as per your system)
                        "label": "Validation failed",  // Error description
                        "severity": "ERROR",  // Severity of the error
                        "type": "BUS",  // Business error type
                        "source": "validateBillGetPayload",  // The sequence or resource that caused the error
                        "origin": "WSO2-MI",  // Origin of the error
                        "spanId": "92e9013d",  // Trace information if available
                        "parameters": [
                            {
                                "code": "0",  // Parameter code
                                "value": "Missing or invalid field(s): " + missingFields.join(", ") // Dynamic message based on missing fields
                            }
                        ]
                    }
                ],
                      };

            mc.setPayloadJSON(errorResponse);  // Set the error response

            // Now, use the Respond mediator to terminate the flow
            mc.setProperty("terminateFlow", "true");  // Flag to stop further processing
        } else {
            // If validation passes, determine the sequence to route to
            if (uniqueCode) {
                mc.setProperty("sequenceToInvoke", "getbilldetailsequence");
            } else if (phoneNumber) {
                mc.setProperty("sequenceToInvoke", "getbilllistsequence");
            }
        }
    </script>

    <!-- After validation, decide which sequence to route to -->
 <switch source="get-property('terminateFlow')">
    <case regex="true">
          <property name="HTTP_SC" value="400" scope="axis2" type="INTEGER"/>
   
        <!-- Log when the flow is terminated due to validation failure -->
        <log level="custom">
            <property name="Info" value="Validation failed, terminating flow."/>
        </log>
        <!-- Stop the flow if validation fails -->
        <respond/>
    </case>
    <default>
        <!-- Log when continuing to check which sequence to invoke -->
        <log level="custom">
            <property name="Info" value="Validation passed, determining sequence to invoke."/>
        </log>
        
        <switch source="get-property('sequenceToInvoke')">
            <case regex="getbilldetailsequence">
                <!-- Log when invoking getbilldetailsequence -->
                <log level="custom">
                    <property name="Info" value="Invoking getbilldetailVitesequence."/>
                </log>
                <!-- Invoke the getbilldetailsequence if validation passed -->
                <sequence key="getBillDetailVite"/>
            </case>
            <case regex="getbilllistsequence">
                <!-- Log when invoking getbilllistsequence -->
                <log level="custom">
                    <property name="Info" value="Invoking getbilllistsequenceVite."/>
                </log>
                <!-- Invoke the getbilllistsequence if validation passed -->
                <sequence key="getbilllistsequenceVite"/>
            </case>
            <default>
                <!-- Log when no valid sequence is found -->
                <log level="custom">
                    <property name="Info" value="Validation failed or invalid conditions, no valid providerId, uniqueCode, or phoneNumber."/>
                </log>
            </default>
        </switch>
    </default>
</switch>

</sequence>
