<?xml version="1.0" encoding="UTF-8"?>
<sequence name="executePaymentVite" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
 
       <log level="custom">
        <property name="Action" value=">> Entering executePayment sequence"/>
        <property name="DAccountNo" expression="get-property('DAccountNo')" scope="default"/>
    </log>
    <property name="payload" expression="json-eval($)" scope="default"/>
    <property name="referenceNo" expression="get-property('uri.var.referenceNo')" scope="default"/>
  <property name="id" expression="json-eval($.data.id)" scope="default"/>
    <property name="status" expression="json-eval($.data.attributes.state)" scope="default"/>

    <!-- Log initial information -->
    <log level="custom">
          <property name="id" expression="json-eval($.data.id)" scope="default"/>
    <property name="status" expression="json-eval($.data.attributes.state)" scope="default"/>

        <property name="message" value="Processing EC Payment via Reference"/>
        <property name="payload" expression="json-eval($)" scope="default"/>
        <property name="referenceNo" expression="json-eval($.referenceNo)" scope="default"/>
    </log>
<script language="js">
    var currentDate = new Date();
    var isoString = currentDate.toISOString().replace('Z', ''); // e.g. "2024-03-26T08:10:18.478"
    
    // Generate random 9-digit nano (without padding)
    var nano = Math.floor(Math.random() * 1e9).toString();
    
    // Replace milliseconds with nano
    var formattedDate = isoString.split('.')[0] + '.' + nano;
    
    mc.setProperty('currentDate', formattedDate);
</script>


    <!-- Decode and validate token -->
    <!-- <sequence key="decodeAndValidateTokenSeq"/> -->

  
    <!-- Lookup by ID in DB -->
<!-- Lookup the payment record -->
<dblookup>
    <connection>
        <pool>
            <dsName>jdbc/DbsBillPaymentDB</dsName>
        </pool>
    </connection>
    <statement>
        <sql>
            SELECT * FROM public."ECPaymentRecords" WHERE "ReferenceNo" = ?
        </sql>
        <parameter expression="get-property('id')" type="VARCHAR"/>
        <result name="providerId" column="ProviderId"/>
        <result name="invoiceId" column="InvoiceId"/>
        <result name="customerId" column="customerId"/>
        <result name="branch" column="Branch"/>
        <result name="accountNo" column="AccountNo"/>
        <result name="reason" column="Reason"/>
        <result name="paymentAmount" column="PaymentAmount"/>
        <result name="billerType" column="BillerType"/>
        <result name="phoneNo" column="phoneNo"/>
        <result name="dbsReferenceNo" column="dbsReferenceNo"/>
    </statement>
</dblookup>
   <log level="custom">
        <property name="providerId" expression="get-property('providerId')"/>
        <property name="invoiceId" expression="get-property('invoiceId')"/>
        <property name="customerId" expression="get-property('customerId')"/>
        <property name="branch" expression="get-property('branch')"/>
        <property name="accountNo" expression="get-property('accountNo')"/>
        <property name="reason" expression="get-property('reason')"/>
        <property name="paymentAmount" expression="get-property('paymentAmount')"/>
        <property name="billerType" expression="get-property('billerType')"/>
        <property name="phoneNo" expression="get-property('phoneNo')"/>
        <property name="dbsReferenceNo" expression="get-property('dbsReferenceNo')"/>
    </log>


    
<!-- Mark if record was found -->
<filter xpath="string-length(get-property('providerId')) > 0">
    <then>
        <property name="recordExists" value="1" scope="default"/>
    </then>
    <else>
        <property name="recordExists" value="0" scope="default"/>
    </else>
</filter>

<!-- If status â‰  'confirmed' AND record does not exist, respond with failure -->
<filter xpath="get-property('status') != 'confirmed'">
    <then>
        <payloadFactory media-type="json">
    <format>
        {
            "data": {
                "attributes": {
                    "state": "failed",
                },
                "id": "$1"
            }
        }
    </format>
    <args>
        <arg expression="get-property('id')"/>
    </args>
</payloadFactory>
<property name="HTTP_SC" value="400" scope="axis2"/>
        <respond/>
        <drop/>
    </then>
</filter>

<!-- If status == 'confirmed' AND record does not exist, call etPaymentSequence -->
<filter xpath="get-property('status') = 'confirmed' and get-property('recordExists') = 0">
    <then>
        <sequence key="etPaymentSequence"/>
        <drop/> <!-- Optional if etPaymentSequence responds -->
    </then>
</filter>

<!-- Continue if record exists (or handle otherwise) -->
<log level="custom">
    <property name="Info" value="Record exists and/or no special condition met, from vite"/>
</log>


    <!-- Log retrieved database information -->
    <log level="custom">
        <property name="providerId" expression="get-property('providerId')"/>
        <property name="invoiceId" expression="get-property('invoiceId')"/>
        <property name="customerId" expression="get-property('customerId')"/>
        <property name="branch" expression="get-property('branch')"/>
        <property name="accountNo" expression="get-property('accountNo')"/>
        <property name="reason" expression="get-property('reason')"/>
        <property name="paymentAmount" expression="get-property('paymentAmount')"/>
        <property name="billerType" expression="get-property('billerType')"/>
        <property name="phoneNo" expression="get-property('phoneNo')"/>
        <property name="dbsReferenceNo" expression="get-property('dbsReferenceNo')"/>
    </log>

 <property name="DAccountNo" expression="get-property('accountNo')" scope="default"/>
    <sequence key="getBillAccountInfo"/>
    <!-- Check if invoiceId exists -->
    <filter xpath="boolean(get-property('paymentAmount'))">
        <then>

            <!-- Check if billerType is 'safari' -->
            <filter xpath="get-property('billerType') = 'TopUp'">
    <then>

        <log level="simple">
            <property name="billerType" expression="get-property('billerType')"/>
            <property name="billerType" value="TopUp innn "/>
        </log>

        <!-- Step 1: Get last transaction timestamp for this phone -->
        <dblookup>
            <connection>
                <pool>
                    <dsName>jdbc/PostgresDB</dsName>
                </pool>
            </connection>
               <statement>
        <sql>
            SELECT "PaymentDate"
            FROM public."ECPaymentRecords"
            WHERE "PhoneNo" = ?
              AND "PaymentAmount" = ?
            ORDER BY "PaymentDate" DESC
            LIMIT 1
        </sql>
        <parameter expression="get-property('phoneNo')" type="VARCHAR"/>
        <parameter expression="get-property('paymentAmount')" type="NUMERIC"/>
    </statement>
            <result name="lastTxnTime" column="PaymentDate"/>
        </dblookup>

        <!-- Step 2: Compare lastTxnTime with now -->
        <script language="js"><![CDATA[
            var lastTime = mc.getProperty("lastTxnTime");
            if (lastTime != null) {
                // Handle DB timestamp (adjust format if needed)
                var parsed = lastTime.replace(" ", "T");
                var javaTime = java.time.LocalDateTime.parse(parsed); 
                var now = java.time.LocalDateTime.now();
                var diff = java.time.Duration.between(javaTime, now).toMinutes();

                if (diff >= 3) {
                    mc.setProperty("allowContinue", "true");
                } else {
                    mc.setProperty("allowContinue", "false");
                    mc.setProperty("waitMinutes", (3 - diff).toString());
                }
            } else {
                // No previous record, allow continue
                mc.setProperty("allowContinue", "true");
            }
        ]]></script>

        <!-- Step 3: Filter based on allowContinue -->
        <filter xpath="get-property('allowContinue') = 'true'">
            <then>
                <!-- continue with your TopUp sequence -->

                <property name="uuid" expression="fn:concat('REQ-', uuid:true())" scope="default"/>
                <property name="timestamp" expression="get-property('currentDate')" scope="default"/>

                <script language="js"><![CDATA[
                    var now = java.time.LocalDateTime.now();
                    var formatter = java.time.format.DateTimeFormatter.ofPattern("yyyyMMddHHmmssSSS");
                    var timestampPart = now.format(formatter);
                    
                    function randomAlphaNumeric(length) {
                        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                        var sb = new java.lang.StringBuilder();
                        for (var i = 0; i < length; i++) {
                            var index = Math.floor(Math.random() * chars.length);
                            sb.append(chars.charAt(index));
                        }
                        return sb.toString();
                    }

                    var requestId = timestampPart + Math.floor(Math.random() * 900 + 100);
                    var msgId = randomAlphaNumeric(20).toUpperCase();
                    var pmtInfId = randomAlphaNumeric(18).toUpperCase();
                    var instrId = randomAlphaNumeric(32);
                    var endToEndId = randomAlphaNumeric(32);
                    var ustrd = randomAlphaNumeric(28).toUpperCase();

                    mc.setProperty("requestId", requestId);
                    mc.setProperty("msgId", msgId);
                    mc.setProperty("pmtInfId", pmtInfId);
                    mc.setProperty("instrId", instrId);
                    mc.setProperty("endToEndId", endToEndId);
                    mc.setProperty("ustrd", ustrd);
                ]]></script>

                <!-- debtor/creditor properties -->
                <property name="debtorBranchId" expression="get-property('branch')" scope="default"/>
                <property name="debtorAccountId" expression="get-property('accountNo')" scope="default"/>
                <property name="paymentAmount" expression="get-property('paymentAmount')" scope="default"/>
                <property name="creditorAccountId" value="24101900001" scope="default"/>
                <property name="creditorBranchId" value="00001" scope="default"/>

                <script language="js"><![CDATA[
                    var paymentAmount = mc.getProperty('paymentAmount');
                    if(paymentAmount != null) {
                        var intAmount = paymentAmount.toString().split('.')[0];
                        mc.setProperty('paymentAmountNoDecimal', intAmount);
                    }
                ]]></script>

                <log level="custom">
                    <property name="id" expression="get-property('id')"/>
                    <property name="timestamp" expression="get-property('timestamp')"/>
                    <property name="msgId" expression="get-property('msgId')"/>
                    <property name="pmtInfId" expression="get-property('pmtInfId')"/>
                    <property name="instrId" expression="get-property('instrId')"/>
                    <property name="endToEndId" expression="get-property('endToEndId')"/>
                    <property name="debtorAccountId" expression="get-property('debtorAccountId')"/>
                    <property name="debtorBranchId" expression="get-property('debtorBranchId')"/>
                    <property name="creditorAccountId" expression="get-property('creditorAccountId')"/>
                    <property name="creditorBranchId" expression="get-property('creditorBranchId')"/>
                    <property name="paymentAmountNoDecimal" expression="get-property('paymentAmountNoDecimal')"/>
                </log>

                <!-- continue with your original TopUp flow -->
                <sequence key="createTransferForTopUp"/>
                <!-- ... rest of your existing sequence unchanged ... -->

            </then>
            <else>
                <!-- reject if less than 3 minutes -->
                <payloadFactory media-type="json">
                    <format>
                        {
                            "status": "REJECTED",
                            "message": "Please wait $1 minutes before retrying."
                        }
                    </format>
                    <args>
                        <arg expression="get-property('waitMinutes')"/>
                    </args>
                </payloadFactory>
                <property name="HTTP_SC" value="429" scope="axis2"/>
                <respond/>
            </else>
        </filter>
    </then>
    <else>
        <sequence key="make_payment_sequence"/>
        <respond/>
    </else>
</filter>
        </then>
        <else>
            <!-- Respond with error if invoiceId not found -->
            <payloadFactory media-type="json">
                <format>{"status":"ERROR","message":"Reference not found"}</format>
            </payloadFactory>
            <property name="HTTP_SC" value="400" scope="axis2"/>
            <respond/>
        </else>
    </filter>
    
       <log level="custom">
        <property name="Action" value=">> Exiting executePayment sequence"/>
        <property name="DAccountNo" expression="get-property('DAccountNo')" scope="default"/>
    </log>
</sequence>
