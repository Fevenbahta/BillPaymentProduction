<?xml version="1.0" encoding="UTF-8"?>
<sequence name="ecPaymentVite" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <log level="custom">
        <property name="Action" value=">> Entering ecPaymentSeq sequence"/>
        <property name="DAccountNo" expression="get-property('DAccountNo')" scope="default"/>
    </log>
      <log level="custom">
        <property name="message" value="Saving EC Payment Request"/>
    </log>

    <!-- Extract and validate payload -->
    <property name="payload" expression="json-eval($)" scope="default" type="STRING"/>
<script language="js"> 
<![CDATA[
    var p = JSON.parse(mc.getProperty("payload"));

    var missing = [];

    // Always check for these fields
    if (!p.billerType) missing.push("billerType");
    if (!p.invoiceId) missing.push("invoiceId");
    if (!p.customerId) missing.push("customerId");
    if (!p.reason) missing.push("reason");
    if (!p.paymentAmount) missing.push("paymentAmount");
    if (!p.branch) missing.push("branch");
    if (!p.accountNo) missing.push("accountNo");
    if (!p.providerId) missing.push("providerId");
 
    // Conditionally require phoneNo if billerType is topup
    if (p.billerType && p.billerType.toUpperCase() === "TOPUP") {
        if (!p.customerId) {
            missing.push("customerId");
        }

        // Validate that topup amount > 5
        if (p.paymentAmount && Number(p.paymentAmount) < 5) {
            mc.setProperty("ERROR_MESSAGE", "Topup amount must be greater than 5");
            mc.setProperty("ERROR_CODE", "400");
            // Stop further processing
            throw "Validation failed: Topup amount too low";
        }
    }

    if (missing.length > 0) {
        mc.setProperty("ERROR_MESSAGE", "Missing: " + missing.join(", "));
        mc.setProperty("ERROR_CODE", "400");
    } else {
        mc.setProperty("billerType", p.billerType);
        mc.setProperty("customerCode", p.customerCode);
        mc.setProperty("invoiceId", p.invoiceId);
        mc.setProperty("customerId", p.customerId);
        mc.setProperty("reason", p.reason);
        mc.setProperty("paymentAmount", p.paymentAmount);
        mc.setProperty("branch", p.branch);
        mc.setProperty("accountNo", p.accountNo);
        mc.setProperty("providerId", p.providerId);
       
        // Optionally set phoneNo if available
        if (p.customerId) {
            mc.setProperty("phoneNo", p.customerId);
        }
    }
]]>
</script>

<script language="js"><![CDATA[
   var uuid = java.util.UUID.randomUUID().toString();
   mc.setProperty("referenceNo", uuid);
]]></script>


    <property name="payload" expression="json-eval($)" scope="default"/>
    <property name="referenceNo" expression="get-property('referenceNo')" scope="default"/>

    <!-- Log initial information -->
    <log level="custom">
        <property name="message" value="Processing EC Payment via ussd"/>
        <property name="payload" expression="json-eval($)" scope="default"/>
         <property name="referenceNo" expression="get-property('referenceNo')" scope="default"/>

           </log>
<script language="js">
    var currentDate = new Date();
    var isoString = currentDate.toISOString().replace('Z', ''); // e.g. "2024-03-26T08:10:18.478"
    
    // Generate random 9-digit nano (without padding)
    var nano = Math.floor(Math.random() * 1e9).toString();
    
    // Replace milliseconds with nano
    var formattedDate = isoString.split('.')[0] + '.' + nano;
    
    mc.setProperty('currentDate', formattedDate);
</script>



    <filter xpath="get-property('ERROR_CODE')">
        <then>
            <payloadFactory media-type="json">
                <format>
                    {"status":"ERROR","message":"$1"}
                </format>
                <args>
                    <arg expression="get-property('ERROR_MESSAGE')"/>
                </args>
            </payloadFactory>
            <property name="HTTP_SC" value="400" scope="axis2"/>
            <respond/>
        </then>
        <else>
            <!-- Save the request in DB -->
            <dbreport>
                <connection>
                    <pool><dsName>jdbc/DbsBillPaymentDB</dsName></pool>
                </connection>
                <statement>
                    <sql>
                        INSERT INTO public."ECPaymentRecords" (
                            "BillerType", "CustomerCode", "InvoiceId", "ReferenceNo", "CustomerId",
                            "Reason", "PaymentAmount", "PaymentDate", "Branch", "Currency",
                            "AccountNo", "ProviderId", "Status", "dbsUserId","phoneNo"
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, now(), ?, ?, ?, ?, ?,?,?)
                    </sql>
                    <parameter expression="get-property('billerType')" type="VARCHAR"/>
                    <parameter expression="get-property('customerCode')" type="VARCHAR"/>
                    <parameter expression="get-property('invoiceId')" type="VARCHAR"/>
                    <parameter expression="get-property('referenceNo')" type="VARCHAR"/>
                    <parameter expression="get-property('customerId')" type="VARCHAR"/>
                    <parameter expression="get-property('reason')" type="VARCHAR"/>
                    <parameter expression="get-property('paymentAmount')" type="DECIMAL"/>
                    <parameter expression="get-property('branch')" type="VARCHAR"/>
                    <parameter value="001" type="VARCHAR"/>
                    <parameter expression="get-property('accountNo')" type="VARCHAR"/>
                    <parameter expression="get-property('providerId')" type="VARCHAR"/>
             
                    <parameter value="pending" type="VARCHAR"/>
                    <parameter expression="get-property('userId')" type="VARCHAR"/>
                         <parameter expression="get-property('phoneNo')" type="VARCHAR"/>
                </statement>
            </dbreport>


        </else></filter>
    <!-- Log retrieved database information -->
    <log level="custom">
        <property name="providerId" expression="get-property('providerId')"/>
        <property name="invoiceId" expression="get-property('invoiceId')"/>
        <property name="customerId" expression="get-property('customerId')"/>
        <property name="branch" expression="get-property('branch')"/>
        <property name="accountNo" expression="get-property('accountNo')"/>
        <property name="reason" expression="get-property('reason')"/>
        <property name="paymentAmount" expression="get-property('paymentAmount')"/>
        <property name="billerType" expression="get-property('billerType')"/>
    </log>

    <!-- Check if invoiceId exists -->
    <filter xpath="boolean(get-property('paymentAmount'))">
        <then>

            <!-- Check if billerType is 'topup' -->
            <filter xpath="get-property('billerType') = 'topup'">
    <then>

        <log level="simple">
            <property name="billerType" expression="get-property('billerType')"/>
            <property name="billerType" value="topup innn "/>
        </log>

        <!-- Step 1: Check last transaction timestamp for this phone -->
        <dblookup>
            <connection>
                <pool><dsName>jdbc/PostgresDB</dsName></pool>
            </connection>
           <statement>
        <sql>
            SELECT "PaymentDate"
            FROM public."ECPaymentRecords"
            WHERE "PhoneNo" = ?
              AND "PaymentAmount" = ?
            ORDER BY "PaymentDate" DESC
            LIMIT 1
        </sql>
        <parameter expression="get-property('phoneNo')" type="VARCHAR"/>
        <parameter expression="get-property('paymentAmount')" type="NUMERIC"/>
    </statement>
            <result name="lastTxnTime" column="PaymentDate"/>
        </dblookup>

        <!-- Step 2: Calculate minutes difference -->
        <script language="js"><![CDATA[
            var lastTime = mc.getProperty("lastTxnTime");
            if (lastTime != null) {
                var parsed = lastTime.replace(" ", "T"); // convert to ISO format
                var javaTime = java.time.LocalDateTime.parse(parsed);
                var now = java.time.LocalDateTime.now();
                var diffMinutes = java.time.Duration.between(javaTime, now).toMinutes();
                
                if (diffMinutes >= 3) {
                    mc.setProperty("allowContinue", "true");
                } else {
                    mc.setProperty("allowContinue", "false");
                    mc.setProperty("waitMinutes", (3 - diffMinutes).toString());
                }
            } else {
                // no previous transaction, allow continue
                mc.setProperty("allowContinue", "true");
            }
        ]]></script>

        <!-- Step 3: Filter to continue only if 3 minutes passed -->
        <filter xpath="get-property('allowContinue') = 'true'">
            <then>
                <!-- Existing TopUp sequence starts here -->
                <property name="uuid" expression="fn:concat('REQ-', uuid:true())" scope="default"/>
                <property name="timestamp" expression="get-property('currentDate')" scope="default"/>
                
                <script language="js"><![CDATA[
                    var now = java.time.LocalDateTime.now();
                    var formatter = java.time.format.DateTimeFormatter.ofPattern("yyyyMMddHHmmssSSS");
                    var timestampPart = now.format(formatter);
                    
                    function randomAlphaNumeric(length) {
                        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                        var sb = new java.lang.StringBuilder();
                        for (var i = 0; i < length; i++) {
                            var index = Math.floor(Math.random() * chars.length);
                            sb.append(chars.charAt(index));
                        }
                        return sb.toString();
                    }

                    var requestId = timestampPart + Math.floor(Math.random() * 900 + 100);
                    var msgId = randomAlphaNumeric(20).toUpperCase();
                    var pmtInfId = randomAlphaNumeric(18).toUpperCase();
                    var instrId = randomAlphaNumeric(32);
                    var endToEndId = randomAlphaNumeric(32);
                    var ustrd = randomAlphaNumeric(28).toUpperCase();

                    mc.setProperty("requestId", requestId);
                    mc.setProperty("msgId", msgId);
                    mc.setProperty("pmtInfId", pmtInfId);
                    mc.setProperty("instrId", instrId);
                    mc.setProperty("endToEndId", endToEndId);
                    mc.setProperty("ustrd", ustrd);
                ]]></script>

                <!-- Your existing debtor/creditor properties and sequences -->
                <property name="debtorBranchId" expression="get-property('branch')" scope="default"/>
                <property name="debtorAccountId" expression="get-property('accountNo')" scope="default"/>
                <property name="paymentAmount" expression="get-property('paymentAmount')" scope="default"/>
                <property name="dbsReferenceNo" expression="get-property('referenceNo')"/>
                <property name="id" expression="get-property('referenceNo')"/>
                <property name="creditorAccountId" value="24101900001" scope="default"/>
                <property name="creditorBranchId" value="00001" scope="default"/>

                <script language="js"><![CDATA[
                    var paymentAmount = mc.getProperty('paymentAmount');
                    if(paymentAmount != null) {
                        var intAmount = paymentAmount.toString().split('.')[0];
                        mc.setProperty('paymentAmountNoDecimal', intAmount);
                    }
                ]]></script>

                <log level="custom">
                    <property name="id" expression="get-property('referenceNo')"/>
                    <property name="dbsReferenceNo" expression="get-property('referenceNo')"/>
                    <property name="timestamp" expression="get-property('timestamp')"/>
                    <property name="msgId" expression="get-property('msgId')"/>
                    <property name="pmtInfId" expression="get-property('pmtInfId')"/>
                    <property name="instrId" expression="get-property('instrId')"/>
                    <property name="endToEndId" expression="get-property('endToEndId')"/>
                    <property name="debtorAccountId" expression="get-property('debtorAccountId')"/>
                    <property name="debtorBranchId" expression="get-property('debtorBranchId')"/>
                    <property name="creditorAccountId" expression="get-property('creditorAccountId')"/>
                    <property name="creditorBranchId" expression="get-property('creditorBranchId')"/>
                    <property name="paymentAmountNoDecimal" expression="get-property('paymentAmountNoDecimal')"/>
                </log>

                <sequence key="createTransferForTopUp"/>
                <!-- ... rest of your TopUp logic continues unchanged ... -->

            </then>
            <else>
                <!-- Reject request if 3 minutes have not passed -->
                <payloadFactory media-type="json">
                    <format>
                        {
                            "status": "REJECTED",
                            "message": "Please wait $1 minutes before retrying."
                        }
                    </format>
                    <args>
                        <arg expression="get-property('waitMinutes')"/>
                    </args>
                </payloadFactory>
                <property name="HTTP_SC" value="429" scope="axis2"/>
                <respond/>
            </else>
        </filter>

    </then>
</filter>
        </then>
        <else>
            <!-- Respond with error if invoiceId not found -->
            <payloadFactory media-type="json">
                <format>{"status":"ERROR","message":"Reference not found"}</format>
            </payloadFactory>
            <property name="HTTP_SC" value="400" scope="axis2"/>
            <respond/>
        </else>
    </filter>

       <log level="custom">
        <property name="Action" value=">> Exiting ecPaymentSeq sequence"/>
        <property name="DAccountNo" expression="get-property('DAccountNo')" scope="default"/>
    </log>
</sequence>