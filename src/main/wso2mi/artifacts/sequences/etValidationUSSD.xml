<?xml version="1.0" encoding="UTF-8"?>
<sequence name="etValidationUSSDSeq" trace="disable" xmlns="http://ws.apache.org/ns/synapse">

  <log level="full">
    <property name="ValidationStage" value="Start Payload Validation"/>
  </log>


      <script language="js">
        var payload = mc.getPayloadJSON();
        var paymentAmount = payload.paymentAmount;
        var accountNo = payload.accountNo;
        var customerCode = payload.customerCode;
        var billerType = payload.billerType;
  
        var invoiceId = payload.invoiceId;
        

    // Set values as properties for use in the sequence
    mc.setProperty("amount", paymentAmount);
    mc.setProperty("identifierValue", accountNo);
    mc.setProperty("orderId", customerCode);
    mc.setProperty("invoiceId", invoiceId);

        // Validation logic: Ensure required fields are present and valid
        var missingFields = [];
        
        // Check if either amount and accountNo are present, or customerCode is present
      if (!customerCode) {
    missingFields.push("customerCode must be provided.");
}
if (!paymentAmount) {
    missingFields.push("paymentAmount must be provided.");
}
if (!accountNo) {
    missingFields.push("accountNo must be provided.");
}


        // Check for other required fields
        if (!billerType) {
            missingFields.push("billerType");
        }
      
        if (!invoiceId) {
            missingFields.push("invoiceId");
        }

        // If any fields are missing, set error response
        if (missingFields.length > 0) {
            mc.setProperty("errorCode", "400");
            var errorMessage = "The following fields are missing or invalid: " + missingFields.join(", ");
            mc.setProperty("errorMessage", errorMessage);

            // Create a dynamic error message based on missing fields
            var errorResponse = {
                "returnCode": "ERROR",
                "ticketId": "247f4b-5d7b-4d32-a1db-f893edaa38a7", // You can generate or assign dynamically if needed
                "traceId": "92e9013d25cca084", // You can generate or assign dynamically if needed
                "feedbacks": [
                    {
                        "code": "SB_DS_001",  // Error code (define as per your system)
                        "label": "Validation failed",  // Error description
                        "severity": "ERROR",  // Severity of the error
                        "type": "BUS",  // Business error type
                        "source": "validateBillGetPayload",  // The sequence or resource that caused the error
                        "origin": "WSO2-MI",  // Origin of the error
                        "spanId": "92e9013d",  // Trace information if available
                        "parameters": [
                            {
                                "code": "0",  // Parameter code
                                "value": "Missing or invalid field(s): " + missingFields.join(", ") // Dynamic message based on missing fields
                            }
                        ]
                    }
                ],
                      };

            mc.setPayloadJSON(errorResponse);  // Set the error response

            // Now, use the Respond mediator to terminate the flow
            mc.setProperty("terminateFlow", "true");  // Flag to stop further processing
        } else {
          
        }
    </script>


 <switch source="get-property('terminateFlow')">
    <case regex="true">
          <property name="HTTP_SC" value="400" scope="axis2" type="INTEGER"/>
   
        <!-- Log when the flow is terminated due to validation failure -->
        <log level="custom">
            <property name="Info" value="Validation failed, terminating flow."/>
        </log>
        <!-- Stop the flow if validation fails -->
        <respond/>
    </case>
    <default></default></switch>
  <log level="custom">
    <property name="ValidationStage" value="Payload Validation Completed Successfully"/>
  </log>



</sequence>